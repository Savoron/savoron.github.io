"use strict";
function requestAttack(player, enemy) {
	var playerDamage = player.calculateDamageAmount();
	var enemyDamage = enemy.calculateDamageAmount();
	var output = "";

	if (playerDamage != -1) {
		enemy.takeDamage(playerDamage);
		output += "You dealt " + playerDamage + " damage to the enemy<br>";
	} else {
    requestWeaponBreak(player);
	}

	if (enemy.getHealth() < 1) {
		requestDeath(enemy, player);
	} else {
		if (enemyDamage != -1) {
			player.takeDamage(enemyDamage);
			output += "Enemy dealt " + enemyDamage + " damage to you<br>";
		} else {
			requestEnemyRun(player);
		}
	}

	if (player.getHealth() < 1) {
		requestDeath(player, player);
	}

	var op = document.getElementById("output");
	op.innerHTML = output + "<br>" + op.innerHTML;
}
function requestCharacterSelectMenu(player) {
	document.getElementById("mainMenu").style.display = "none";
	//document.getElementById("mainMenu-characterSelect").style.display = "block";
	requestStartGame(player);
}
function requestCharacter(e) {
	console.log("I'm getting to this -___-");
}
function requestDeath(creature, player) {
	if (creature.type == "player") {
		requestGameOver();
	} else if (creature.type == "enemy"){
		requestEnemyDeath(player);
	} else {
		console.log("How? What? WTF DID YOU DO!?");
	}
}
function requestDisableButton(button) {
	document.getElementById(button).disabled = true;
}
function requestEnableButton(button) {
	document.getElementById(button).disabled = false;
}
function requestEnemy(player) {
	var roll = requestRoll();
	var findEnemy = requestRoll(player);
	if (findEnemy > roll) {
		requestDialogue("enemy", player);
		return requestSpawnEnemy();
	} else {
		requestDialogue("nothing", player);
	}
}
function requestEnemyDeath(player) {
	requestDialogue("killedenemy", player);
	requestDisableButton("btnAttack");
	requestDisableButton("btnRunAway");
	requestEnableButton("btnSearch");
	requestEnableButton("btnMoveOn");
	document.getElementById("enemy").remove();
}
function requestEnemyRun(player, enemy) {
	var roll = requestRoll();
	var run = requestRoll();
	if (run > roll) {
		requestEnemyDeath(player);
		requestDialogue("enemygotaway", player);
	} else {
		requestDialogue("enemytriedtorun", player);
	}
}
function requestGameOver() {
	document.getElementById("gameover").style.display = "block";
}
function requestRoll() {
	var possibleSidedDice = [4,6,8,10,12,20];
	var indexOfNewRadomDice = new dice(possibleSidedDice.length).roll()-1;
	var randomDice = new dice(possibleSidedDice[indexOfNewRadomDice]).roll();
	return randomDice;
}
function requestRunAway(player, enemy) {
	var roll = requestRoll();
	var run = requestRoll();
	if (run > roll) {
		requestEnemyDeath(player);
		requestDialogue("runaway", player);
	} else if (enemy.getWeaponDurability() > 0){
		requestDialogue("failedrunaway", player);
		player.takeDamage(enemy.calculateDamageAmount());
		if (player.getHealth() < 1) {
			requestDeath(player, player);
		}
	} else {
		requestEnemyDeath(player);
		requestDialogue("runaway", player);
	}
}
function requestMainMenu() {
	document.getElementById("mainMenu").style.display = "block";
}
function requestMobileWarning() {
	document.getElementById("mobileWarning").style.display = "block";
}
function requestSearch(player) {
	if (player.getWeaponDurability() < 1) {
		var roll = requestRoll();
		var findWeapon = requestRoll();
		if (findWeapon > roll) {
			player.generateNewWeapon();
			requestDialogue("foundweapon", player);
		} else {
			requestDialogue("foundnothing", player);
		}
	} else {
		requestDialogue("durability", player)
	}
}
function requestSpawnEnemy() {
	var div = document.createElement("div");
			div.id = "enemy";
			div.className = "enemy";
	document.getElementById("creatureBoard").appendChild(div);
	requestDisableButton("btnMoveOn");
	requestEnableButton("btnAttack");
	requestEnableButton("btnRunAway");
	requestDisableButton("btnSearch");
	return new enemy();;
}
function requestSpawnPlayer() {
	var div = document.createElement("div");
			div.id = "player";
			div.className = "player";
	document.getElementById("creatureBoard").appendChild(div);
	requestEnableButton("btnMoveOn");
	return new player();
}
function requestStartGame(player) {
	var p = player;
	var output = document.getElementById("output");
	output.innerHTML = "Hello Player, <br>You have just been randomly generated by two dice. One dice was a six sided dice that determind which of the other six, six sided dice were used to generate your stats. Yes, you have stats. Would you like to know what they are? Should I tell you? Hmm well I guess so. So here you go <3" +
										 "<br><br>Your Stats:" +
										 "<br>Max Health: " + p.getHealth() +
										 "<br>Starting Weapon: " + p.getWeaponType() +
										 "<br>Weapon's base damage: " + p.getWeaponBaseDamage() + " (Your damage is calculated from your base damage amount)" +
										 "<br>Weapon Durability: " + p.getWeaponDurability() + " (Your weapon durability is the amount of uses it has before it will break)" +
										 "<br><br>Now that you've look at your stats. Let me explain what those buttons do." +
										 "<br>Attack - This button is used to attack an enemies you come across in your adventure." +
										 "<br>Run Away - Do I need to explain this? Well you can run away when you're in a fight. Might be useful if you're weapon breaks." +
										 "<br>Search - Searching is only aviable when you're not in combat. When you search you might find a something. Who knows." +
										 "<br>Move On - Move on will progress you through the game. Basically move you to the next enemy." +
										 "<br><br>Well that's the basics of the game. You have a weapon and the only button you can click is Move On. So go forth and get lucky or die!";
}
function requestStats(player) {
	var stats = "Stats After Battle:<br>Health: " + player.getHealth() + "<br>Weapon Durability: " + player.getWeaponDurability();
	return stats;
}
function requestWeapon() {
	return new weapon();
}
function requestWeaponBreak(player) {
	requestDialogue("weaponbreak", player);
	requestDisableButton("btnAttack", player);
}

function main() {
	var hold = false;
	if (mobilecheck()) {
		requestMobileWarning();
	}
	if (!hold) {
		requestMainMenu();
		core();
	}
}

function core() {
	var player = requestSpawnPlayer();
	var enemy;

	//Main Menu Buttons//
	document.getElementById("btnMainMenu-ClickMe").addEventListener("click",   function(){ requestGameOver() });
	document.getElementById("btnMainMenu-StartGame").addEventListener("click", function(){ requestCharacterSelectMenu(player)});
	document.getElementById("btnMobileWarning").addEventListener("click", function(){ document.getElementById("mobileWarning").style.display = "none"; });

	//Action Menu Buttons//
	document.getElementById("btnAttack").addEventListener("click",  function(){ requestAttack(player, enemy) });
	document.getElementById("btnRunAway").addEventListener("click", function(){ requestRunAway(player, enemy) });
	document.getElementById("btnSearch").addEventListener("click",  function(){ requestSearch(player) });
	document.getElementById("btnMoveOn").addEventListener("click",  function(){ enemy = requestEnemy(player) });
}

//Credit for this goes to http://detectmobilebrowsers.com/
//and http://stackoverflow.com/questions/11381673/detecting-a-mobile-browser
window.mobilecheck = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

main();
